% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fn.tree.R
\name{fn.tree}
\alias{fn.tree}
\title{fn.tree}
\usage{
fn.tree(doc = "fn.tree", data, GroupVar, Groups = "All", AnalyticVars,
  wts = NA, CpDigits = 3, plotTree = T, plotCp = T, Model,
  minSplit = 20, cP = 0.01, predictSources = F, predictData, ID = " ",
  folder = " ", ds.Classify, ds.CpTable, ds.OptSplit, ds.predictedSources,
  ds.predictedTotals)
}
\arguments{
\item{doc}{Documentation, default is fn.tree (the function name)}

\item{data}{Data frame with the data to be analyzed}

\item{GroupVar}{Name of the variable defining groups, grouping is required}

\item{Groups}{Vector of codes for groups to be used, 'All' (the default) if use all groups}

\item{AnalyticVars}{Names of analytic variables}

\item{wts}{Option to weight the observations, if used, vector with length nrow(data); if NA (the default), assume equal weights}

\item{CpDigits}{Number of significant digits to display in the Cp table, default is value is 3}

\item{plotTree}{If T (true, the default), plot the recursive partitioning tree}

\item{plotCp}{If T (tree, the default), plot the Cp table}

\item{Model}{A character string containing the variables considered separated by + signs}

\item{minSplit}{The minimum size of a group for splitting, default is 20 (the default in rpart())}

\item{cP}{The required improvement in Cp for a group to be split, default is .01 (the default in rpart())}

\item{predictSources}{Logical: if T, use the tree to predict sources for observations in predictData; default is F}

\item{predictData}{Data frame with data used to predict sources, must contain all variables in AnalyticVars}

\item{ID}{If not " " (the default), name of a variable identifying a sample in predictData}

\item{folder}{If " ", no files are written; otherwise, the path to the folder containing the excel files,
must end with two forward slashes}

\item{ds.Classify}{Name of the excel file containing the results of classifying the data, must end with .csv}

\item{ds.CpTable}{Name of the excel file containing the values of Cp at successive splits, must end with .csv}

\item{ds.predictedTotals}{Name of the excel file containing the total number of objects predicted to be from each sources, must end with .csv}

\item{ds.predictedSourcess}{Name of the excel file containing the results of classifying the data, must end with .csv}
}
\value{
The function fits a classification tree model.  The variables in AnalyticVars are considered in the order
       they appear in the Model argument (from left to right).  See the vignette for more details.
       The function returns a list with the following components:

\itemize{
  \item{usage:}{ A vector with the contents of the argument doc, the date run, the version of R used}
  \item{dataUsed:}{ The contents of the argument data restricted to the groups used}
  \item{params.grouping:}{ A list with the values of the arguments GroupVar and Groups}
  \item{analyticVars:}{ A vector with the value of the argument AnalyticVars}
  \item{params.logical:}{ The values of plotTree, predictSources}
  \item{model:}{ A character string with the value of the argument Model}
  \item{classification:}  {A data frame showing the crossclassification of sources and predicted sources}
  \item{CpTable:}{  A data frame showing the decrease in Cp with increasing numbers of splits}
  \item{predictedSources:}{  If predictSources = T, a data frame with the predicted sources}
  \item{predictedTotals}{  If predictedSources = T, a vector with the number of objects predicted to be from each source}
  \item{files:}{ If folder != " ", a character string with the path to the file containing the excel files
   defined is ds.Classify and ds.CpTable.}
 }
}
\description{
Fit a recursive partitioning model
}
\examples{
data(ObsidianSources)
analyticVars<-c("Rb","Sr","Y","Zr","Nb")
save.tree <- fn.tree(data=ObsidianSources, GroupVar="Code",Groups="All", AnalyticVars=analyticVars,
  Model = "Rb"+"Sr"+"Y"+"Zr"+"Nb")
 # variables in the model statement in order of importance from a random forst analysis
 #
 #  predict sources of artifacts
data(ObsidianSources)
data(ObsidianArtifacts)
analyticVars<-c("Rb","Sr","Y","Zr","Nb")
save.tree <- fn.tree(data=ObsidianSources, GroupVar="Code",Groups="All", AnalyticVars=analyticVars,
  Model = "Rb"+"Sr"+"Y"+"Zr"+"Nb", predictSources=T, predictData=ObsidianArtifacts, ID="labID")

}
