% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fn.randomForest.R
\name{fn.randomForest}
\alias{fn.randomForest}
\title{fn.randomForest}
\usage{
fn.randomForest(doc = "fn.randomForest", data, GroupVar, Groups = "All",
  AnalyticVars, ID = " ", Ntrees = 500, NvarUsed = NA, Seed = 11111,
  digitsImportance = 1, plotErrorRate = T, plotImportance = T,
  predictSources = F, predictData, plotSourceProbs = T, folder = " ",
  ds.importance, ds.confusion)
}
\arguments{
\item{doc}{Documentation for the function use, default value is the function name}

\item{data:}{Data frame with the data to be analyzed}

\item{GroupVar:}{Name of variable defining groups, grouping is required}

\item{Groups:}{Vector of codes for groups to be used, 'All' if use all groups}

\item{ID:}{if not " " (the default), the name of the variable with sample ID}

\item{AnalyticVars:}{Vector with names of analytic variables}

\item{Ntrees:}{Number of trees grown, default value of 500 is that for the randomForest function}

\item{NvarUsed:}{If not NA, number of variables to use in each random forest call to rpart;
if NA, rpart uses the default (the square root of the number of candidate variables)}

\item{Seed:}{If not NA, a random number generator seed to produce reproducible results}

\item{digitsImportance:}{Significant digits for the importance measure, default is 1}

\item{plotErrorRate:}{Logical, whether to show the error rate plot, default is T}

\item{plotImportance:}{Logical, whether to show the plot of variable importance, default is T}

\item{predictSources:}{Logical; if T, predict sources for the data in predictData; default is F}

\item{predictData:}{data frame or matrix with data used to predict sources for observations,
must contain all variables in AnalyticVars}

\item{plotSourceProbs:}{Logical, if T (the default) and predictSources=T, show box plots of source
probabilities}

\item{folder:}{If not " " (the default), the path to folder containing excel files, must end with '\\'}

\item{ds.importance:}{Excel file with importance measures, extension .csv}

\item{ds.confusion:}{Excel file with confusion matrix, extension.csv}

\item{ds.predictedSources:}{If predictSources = T, an excel file with the information in predictedSources}

\item{ds.predictedTotals:}{If predictSources = T, an excel file with the vector predictedTotals}
}
\value{
The function implements a random forest analysis.  For each analysis, the variables used in the
          analysis are considered in the order in which they appear in AnalyticVars (from left to right);
          See the vignette for more details.
          The function returns a list with the following components:

\itemize{
  \item{usage:}{ A vector with the contents of the argument doc, the date run, the version of R used}
  \item{dataUsed:}{ The contents of the argument data restricted to the groups used}
  \item{params.grouping:}{ A list with the values of the arguments GroupVar and Groups}
  \item{analyticVars:}{ A vector with the value of the argument AnalyticVars}
  \item{params.numeric:}{ A numeric vector with the values of the arguments Ntrees, NvarUsed, and Seed}
  \item{formula.rf:}  {The formula used in the analysis (the variables specified in the argument AnalyticVars
                       separated by + signs)}
  \item{forest:}{  The random forest}
  \item{importance:}{  A data frame with information on the importance of each variable in AnalyticVars}
  \item{confusion:}{  A data frame with the estimate of the confusion matrix}
  \item{predictedSources:}{  A data frame with prediction information, sample ID (if requested),
     and values of AnalyticVars}
  \item{predictedTotals:}{  A vector with the predicted totals for each group (source)}
  \item{files:}{ If folder != " ", a character string with the path to the file containing the excel files
                 with the importance and confusion estimates}
 }
}
\description{
Random forest analysis
}
\examples{
data(ObsidianSources)
analyticVars<-c("Rb","Sr","Y","Zr","Nb")
save.randomForest <- fn.randomForest(data=ObsidianSources, GroupVar="Code",Groups="All", AnalyticVars=analyticVars,
  NvarUsed=3)
#
# predicted sources for artifacts
data(ObsidianSources)
data(ObsidianArtifacts)
analyticVars<-c("Rb","Sr","Y","Zr","Nb")
save.randomForest <- fn.randomForest(data=ObsidianSources, GroupVar="Code",Groups="All", AnalyticVars=analyticVars,
  NvarUsed=3, predictSources=T,predictData=ObsidianArtifacts)

}
